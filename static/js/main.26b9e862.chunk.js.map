{"version":3,"sources":["components/card/Card.js","firebase.js","redux/charsDuck.js","components/home/HomePage.js","components/favs/FavPage.js","redux/userDuck.js","components/login/LoginPage.js","Routes.js","App.js","serviceWorker.js","redux/store.js","index.js","components/card/card.module.css","components/favs/favs.module.css","components/login/login.module.css","components/home/home.module.css","assets/images/spinner.gif"],"names":["onClick","side","console","log","Card","name","image","rightClick","leftClick","hide","className","styles","container","card","alt","src","actions","left","size","right","defaultProps","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","db","firestore","collection","initialState","array","loadingChars","errorChars","favorites","loadingFavs","errorFavs","nextPage","client","ApolloClient","uri","query","gql","getCharactersGraphQL","dispatch","getState","a","async","type","characters","variables","page","then","res","payload","data","results","info","next","catch","err","message","retrieveFavs","id","doc","get","snap","getFavs","user","storage","localStorage","setItem","JSON","stringify","reducer","state","action","connect","CHARACTERS","removeCharacter","shift","length","addToFavorites","char","push","set","updateDB","nextChar","addFav","renderCharacter","FAVS","map","point","i","key","arrRedux","loggedIn","fetching","error","LOGGED","doLoginGoogle","provider","auth","GoogleAuthProvider","signInWithPopup","result","uid","displayName","email","photo","photoURL","errorMessage","loginWithGoogle","logOutSesion","signOut","clear","window","location","reload","history","useHistory","loading","AUTH","PrivateRoute","path","component","rest","to","exact","Home","FavPage","LoginPage","App","activeClassName","Boolean","hostname","match","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","rootReducer","combineReducers","userReducer","charsReducer","generateStore","store","createStore","applyMiddleware","thunk","parse","getItem","restoreSesion","reloadFavs","WithRouter","WithStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.26b9e862.chunk.js","sourcesContent":["import React from 'react'\nimport styles from './card.module.css'\nimport FontAwesome from 'react-fontawesome'\nimport PropTypes from 'prop-types'\n\nlet rick = \"https://rickandmortyapi.com/api/character/avatar/1.jpeg\"\n\nfunction onClick(side) {\n    return () => console.log(side)\n}\n\nexport default function Card({\n    name, image, rightClick, leftClick, hide\n}) {\n    return (\n        <div className={styles.container}>\n            <div className={styles.card}>\n                <img alt=\"rick\" src={image} />\n                <p className={styles.name}>\n                    {name}\n                </p>\n            {!hide && <div className={styles.actions}>\n                <div\n                    onClick={leftClick || onClick(\"left\")}\n                    className={styles.left}>\n                    <FontAwesome\n                        name=\"thumbs-down\"\n                        size=\"2x\"\n                    />\n                </div>\n                <div\n                    onClick={rightClick || onClick(\"right\")}\n                    className={styles.right}>\n                    <FontAwesome\n                        name=\"heart\"\n                        size=\"2x\"\n                    />\n                </div>\n            </div>}\n            </div>\n        </div>\n    )\n}\n\nCard.propTypes = {\n    name: PropTypes.string.isRequired,\n    image: PropTypes.string.isRequired,\n    leftClick: PropTypes.func,\n    rightClick: PropTypes.func,\n}\n\nCard.defaultProps = {\n    name: \"Rick Sanches\",\n    image: rick,\n}\n","import firebase from 'firebase/app';\nimport 'firebase/auth';\nimport 'firebase/firestore'\n\n// Your web app's Firebase configuration\n  // For Firebase JS SDK v7.20.0 and later, measurementId is optional\n  let firebaseConfig = {\n    apiKey: \"AIzaSyDw23eEK3GczAH2X71b77eVwGdViVdB-qI\",\n    authDomain: \"rickandmorty-c69c5.firebaseapp.com\",\n    projectId: \"rickandmorty-c69c5\",\n    storageBucket: \"rickandmorty-c69c5.appspot.com\",\n    messagingSenderId: \"184118299134\",\n    appId: \"1:184118299134:web:0611fa08e0c09d7671d8af\",\n    measurementId: \"G-J1NTMCYDCZ\"\n  };\n  // Initialize Firebase\n  firebase.initializeApp(firebaseConfig);\n  //firebase.analytics();\n  //llamamos a la base de datos firestore\n  export const db = firebase.firestore().collection('favs')\n\n  export const getFavs = (id) => {\n    return db.doc(id).get()\n        .then(snap => {\n          return snap.data().array\n        })\n  }\n\n  export const updateDB = (array,id) => {\n    //en el documento del USUARIO\n    //firebase en el set soporta un objeto NO un array\n    return db.doc(id).set({array})\n    //db.doc(id).set({favoritos:[...array]}) tambien es valido\n  }\n\n  export const signOutGoogle = () => {\n    firebase.auth().signOut()\n  }\n\n  export const loginWithGoogle = () => {\n    //firebase siempre devuelve una promesa\n    var provider = new firebase.auth.GoogleAuthProvider();\n    return firebase.auth()\n    .signInWithPopup(provider)\n    .then((result) => {\n      /** @type {firebase.auth.OAuthCredential} */\n      //var credential = result.credential;\n      // This gives you a Google Access Token. You can use it to access the Google API.\n      //var token = credential.accessToken;\n      // The signed-in user info.\n      let user = {\n        id: result.user.uid,\n        name: result.user.displayName,\n        email: result.user.email,\n        photo: result.user.photoURL\n        }\n\n      console.log(\"USUARIO:\",user)\n      return user\n    }).catch((error) => {\n      // Handle Errors here.\n      //var errorCode = error.code;\n      let errorMessage = error.message;\n      // The email of the user's account used.\n      //var email = error.email;\n      // The firebase.auth.AuthCredential type that was used.\n      //var credential = error.credential;\n      // ...\n      console.log(\"ERROR:\",errorMessage)\n      return errorMessage\n    });\n  }\n","import axios from 'axios';\nimport { updateDB,getFavs } from '../firebase.js';\nimport ApolloClient, { gql } from 'apollo-boost';\n\n//constants\nlet initialState = {\n  array: [],\n  loadingChars: true,\n  errorChars: \"\",\n  favorites: [],\n  loadingFavs: true,\n  errorFavs: \"\",\n  nextPage: 1\n}\n\nlet GET_CHARACTERS = \"GET_CHARACTERS\";\nlet GET_CHARACTERS_SUCCESS = \"GET_CHARACTERS_SUCCESS\";\nlet GET_CHARACTERS_FAILURE = \"GET_CHARACTERS_FAILURE\";\n\nlet REMOVE_CHARACTER = \"REMOVE_CHARACTER\";\n\nlet ADD_TO_FAVORITES = \"ADD_TO_FAVORITES\";\n\nlet GET_FAVORITES_DB = \"GET_FAVORITES_DB\";\nlet GET_FAVORITES_DB_SUCCESS = \"GET_FAVORITES_DB_SUCCESS\";\nlet GET_FAVORITES_DB_FAILURE = \"GET_FAVORITES_DB_FAILURE\";\n\nlet UPDATE_PAGE = \"UPDATE_PAGE\";\n\nlet URL = \"https://rickandmortyapi.com/api/character\"\n\nlet client = new ApolloClient({\n  uri: \"https://rickandmortyapi.com/graphql\"\n})\n\nlet query = gql`\n  query ($page:Int){\n    characters(page:$page){\n      info{\n        pages\n        next\n        prev\n      }\n      results{\n        name\n        image\n      }\n    }\n  }\n`\n//reducer\nconst reducer = (state = initialState, action) => {\n  switch(action.type){\n    case GET_CHARACTERS:\n      return {\n        ...state,\n        loadingChars:false\n      }\n    case GET_CHARACTERS_SUCCESS:\n      return {\n        ...state,\n        array: action.payload,\n        loadingChars: true\n      }\n    case GET_CHARACTERS_FAILURE:\n      return {\n        ...state,\n        errorChars: action.payload,\n        loadingChars:true\n      }\n    case REMOVE_CHARACTER:\n      return {\n        ...state,\n        array: action.payload\n      }\n    case ADD_TO_FAVORITES:\n      return {\n        ...state,\n        ...action.payload\n      }\n    case GET_FAVORITES_DB:\n      return {\n        ...state,\n        loadingFavs: false\n      }\n    case GET_FAVORITES_DB_SUCCESS:\n    return {\n      ...state,\n      loadingFavs: true,\n      favorites: action.payload\n    }\n    case GET_FAVORITES_DB_FAILURE:\n      return {\n        ...state,\n        loadingFavs: true,\n        errorFavs: action.payload\n      }\n    case UPDATE_PAGE:\n      return {\n        ...state,\n        nextPage: action.payload\n      }\n    default:\n      return state;\n  }\n}\n//actionsCreator\nexport const getCharacters = () => {\n    return async (dispatch,getState) => {\n      dispatch({\n        type:GET_CHARACTERS\n      })\n      await axios.get(URL)\n      .then(res => {\n        dispatch({\n          type: GET_CHARACTERS_SUCCESS,\n          payload: res.data.results\n        })\n      })\n      .catch(err => {\n        console.log(err)\n        dispatch({\n          type: GET_CHARACTERS_FAILURE,\n          payload: err.message\n        })\n      })\n    }\n}\n\nexport const getCharactersGraphQL = () => {\n    return async (dispatch,getState) => {\n      dispatch({\n        type:GET_CHARACTERS\n      })\n      let { nextPage } = getState().characters\n      await client.query({\n        query,\n        variables:{\n          page: nextPage\n        }\n      })\n      .then(res => {\n        dispatch({\n          type: GET_CHARACTERS_SUCCESS,\n          payload: res.data.characters.results\n        })\n        dispatch({\n          type: UPDATE_PAGE,\n          payload: res.data.characters.info.next ? res.data.characters.info.next : 1\n        })\n      })\n      .catch(err => {\n        console.log(err)\n        dispatch({\n          type: GET_CHARACTERS_FAILURE,\n          payload: err.message\n        })\n      })\n    }\n}\n\nexport const removeCharacter = () => {\n  return (dispatch,getState) => {\n    //getState te trae todo el store del combineReducers\n    let { array } = getState().characters;\n    array.shift()\n    if(array.length === 0){\n      getCharactersGraphQL()(dispatch,getState)\n      return\n    }\n    dispatch({\n      type: REMOVE_CHARACTER,\n      payload: [...array]\n    })\n  }\n}\n\nexport const addToFavorites = () => {\n\n  return (dispatch,getState) => {\n    let { array,favorites } = getState().characters\n    let char = array.shift()\n    favorites.push(char)\n    let { id } = getState().user\n    updateDB(favorites,id)\n    localStorage.setItem('user',JSON.stringify(getState()))\n    dispatch({\n      type: ADD_TO_FAVORITES,\n      payload: { array: [...array], favorites: [...favorites]}\n    })\n  }\n}\n//auxiliar\nexport const saveStorage = (storage) => {\n  localStorage.setItem('user',JSON.stringify(storage))\n}\n\nexport const retrieveFavs = () => {\n  return (dispatch,getState) => {\n      dispatch({\n        type: GET_FAVORITES_DB\n      })\n      let { id } = getState().user\n      getFavs(id)\n      .then(array => {\n        dispatch({\n          type: GET_FAVORITES_DB_SUCCESS,\n          payload: [...array]\n        })\n\n        saveStorage(getState())\n      })\n      .catch(err => {\n        console.log(err)\n        dispatch({\n          type: GET_FAVORITES_DB_FAILURE,\n          payload: err.message\n        })\n      })\n  }\n}\n\nexport const reloadFavs = () => {\n  return (dispatch,getState) => {\n    let storage = JSON.parse(localStorage.getItem('user'))\n    console.log(storage)\n    if(storage && storage.characters){\n      return dispatch({\n          type: GET_FAVORITES_DB_SUCCESS,\n          payload: storage.characters.favorites\n        })\n    }\n  }\n}\n\nexport default reducer;\n","import React from 'react'\nimport Card from '../card/Card'\nimport styles from './home.module.css'\nimport { connect } from 'react-redux'\nimport { removeCharacter,addToFavorites  } from '../../redux/charsDuck.js'\n\nconst Home = ({ CHARACTERS, removeCharacter,addToFavorites }) => {\n\n    function nextChar() {\n      removeCharacter()\n    }\n\n    const addFav = () => {\n      addToFavorites()\n    }\n\n    function renderCharacter() {\n        let char = CHARACTERS[0]\n        return (\n            <Card rightClick={addFav} leftClick={nextChar} {...char} />\n        )\n    }\n\n    return (\n        <div className={styles.container}>\n            <h2>Personajes de Rick y Morty</h2>\n            <div>\n                {renderCharacter()}\n            </div>\n        </div>\n    )\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    CHARACTERS: state.characters.array\n  }\n}\n\nexport default connect(mapStateToProps,{ removeCharacter,addToFavorites })(Home);\n","import React from 'react';\nimport styles from './favs.module.css';\nimport Card from '../card/Card';\nimport { connect } from 'react-redux';\nimport { db } from '../../firebase'\n\nconst FavPage = ({ FAVS }) => {\n\n  console.log(db)\n\nconst erase = () => {\n  if(FAVS && FAVS.characters && FAVS.characters.favorites){\n    let arrRedux = FAVS.characters.favorites\n    // let arrFirebase =\n    console.log(arrRedux)\n  }\n}\n\n    return (\n      <>\n      {FAVS.characters.favorites ? (\n        <div className={styles.container}>\n            <h2>Favoritos</h2>\n            {FAVS.characters.favorites.map((point,i) => {\n              return (\n                <Card name={point.name} image={point.image} hide key={i} />\n              )\n            })}\n            <button onClick={erase}> borrar todo </button>\n        </div>\n      ):(\n        <div className={styles.container}>\n            <h2>No hay personajes agregados</h2>}\n        </div>\n      )}\n      </>\n    )\n}\n\nconst mapStateToProps = (state) =>{\n  return {\n    FAVS: state\n  }\n}\n\nexport default connect(mapStateToProps)(FavPage);\n","import { loginWithGoogle, signOutGoogle } from '../firebase.js';\nimport { retrieveFavs } from './charsDuck.js'\n\n//constants\nlet initialState = {\n  loggedIn: false,\n  fetching: false,\n}\n\nlet LOGIN = \"LOGIN\";\nlet LOGIN_SUCCESS = \"LOGIN_SUCCESS\";\nlet LOGIN_FAILURE = \"LOGIN_FAILURE\";\n\nlet LOGOUT = \"LOGOUT\"\n\n//reducer\nconst reducer = (state = initialState, action) => {\n  switch(action.type){\n    case LOGIN:\n      return {\n        ...state,\n        fetching: true\n      }\n    case LOGIN_SUCCESS:\n      return {\n        ...state,\n        fetching: false,\n        ...action.payload,\n        loggedIn: true\n      }\n    case LOGIN_FAILURE:\n      return {\n        ...state,\n        fetching: false,\n        error: action.payload\n      }\n    case LOGOUT:\n      return {\n        ...state\n      }\n    default:\n      return state;\n  }\n}\n\n//actionsCreator\nexport const doLoginGoogle = () => {\n  return (dispatch,getState) => {\n    dispatch({\n      type: LOGIN,\n    })\n    loginWithGoogle()\n    .then(async(user) => {\n      dispatch({\n        type: LOGIN_SUCCESS,\n        payload: {\n          id: user.id,\n          name: user.name,\n          email: user.email,\n          photo: user.photo\n        }\n      })\n      await retrieveFavs()(dispatch, getState)\n    })\n    .catch(err => {\n      console.log(err)\n      dispatch({\n        type: LOGIN_FAILURE,\n        payload: err.message\n      })\n    })\n  }\n}\n\nexport const restoreSesion = () => {\n  return (dispatch) => {\n    let storage = JSON.parse(localStorage.getItem('user'))\n    if(storage && storage.user){\n      dispatch({\n        type: LOGIN_SUCCESS,\n        payload: storage.user\n      })\n    }\n  }\n}\n\nexport const logOutSesion = () => {\n  return (dispatch) => {\n    signOutGoogle()\n    dispatch({\n      type: LOGOUT\n    })\n    localStorage.clear()\n    window.location.reload()\n  }\n}\n\nexport default reducer;\n","import React from 'react';\nimport styles from './login.module.css';\nimport { useHistory } from 'react-router-dom';\nimport { doLoginGoogle, logOutSesion } from '../../redux/userDuck.js';\nimport { connect } from 'react-redux';\nimport loading from '../../assets/images/spinner.gif'\n\nconst LoginPage = ({ LOGGED,doLoginGoogle, logOutSesion }) => {\n\n  const history = useHistory();\n\n  const googleSesion = () => {\n    doLoginGoogle()\n  }\n\n  const logOutGoogleSesion = () => {\n    logOutSesion()\n  }\n\n    return (\n      <>\n      {LOGGED && LOGGED.fetching ?(\n        <div>\n          <img src={loading} alt='loading...'/>\n        </div>\n      ):(\n        <>\n        {LOGGED.loggedIn ?(\n          <div className={styles.container}>\n            <h1>\n                Para ver a los personajes dirigete al inicio\n            </h1>\n            <button onClick={() => history.push(\"/\")}>\n                Ir\n            </button>\n            <h1>\n                Finaliza sesión\n            </h1>\n            <button onClick={logOutGoogleSesion}>\n                Salir\n            </button>\n          </div>\n        ) : (\n          <div className={styles.container}>\n            <h1>\n                Inicia Sesión con Google para comenzar\n            </h1>\n            <button onClick={googleSesion}>\n                ir Google Auth\n            </button>\n          </div>\n        )}\n        </>\n      )}\n      </>\n    )\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    LOGGED: state.user\n  }\n}\n\nexport default connect(mapStateToProps,{ doLoginGoogle, logOutSesion })(LoginPage)\n","import React from 'react';\nimport { Switch, Route, Redirect } from 'react-router-dom';\nimport Home from './components/home/HomePage';\n// import GraphHome from './components/home/GraphHome';\nimport FavPage from './components/favs/FavPage';\nimport LoginPage from './components/login/LoginPage';\nimport { connect } from 'react-redux';\n\nconst Routes = ({AUTH}) => {\n\n    const PrivateRoute = ({path,component,...rest}) => {\n        if(AUTH.user && AUTH.user.loggedIn === true){\n            return <Route path={path} component={component} {...rest}/>\n        }else {\n            return <Redirect to='/login' {...rest}/>\n        }\n\n    }\n    return (\n        <Switch>\n            <PrivateRoute exact path=\"/\" component={Home} />\n            <PrivateRoute path=\"/favs\" component={FavPage} />\n            <Route path=\"/login\" component={LoginPage} />\n        </Switch>\n    )\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        AUTH: state\n    }\n}\n\nexport default connect(mapStateToProps)(Routes);\n","import React from 'react';\nimport './App.css';\nimport { NavLink } from 'react-router-dom'\nimport Routes from './Routes';\n\nfunction App() {\n  return (\n    <div>\n      <div className=\"nav-bar\">\n        <NavLink className=\"link\" activeClassName=\"active\" exact to=\"/\">\n          Inicio\n        </NavLink>\n        <NavLink className=\"link\" activeClassName=\"active\" to=\"/favs\">\n          Favoritos\n        </NavLink>\n        <NavLink className=\"link\" activeClassName=\"active\" to=\"/login\">\n          Login\n        </NavLink>\n      </div>\n      <Routes />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { createStore,combineReducers,compose,applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport userReducer, { restoreSesion } from './userDuck.js';\n// import charsReducer,{ getCharacters,reloadFavs,getCharactersGraphQL,loadStorage } from './charsDuck.js';\nimport charsReducer,{ reloadFavs,getCharactersGraphQL } from './charsDuck.js';\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nlet rootReducer = combineReducers({\n  user: userReducer,\n  characters: charsReducer\n})\n\nconst generateStore = () =>{\n  let store = createStore(\n      rootReducer,\n      composeEnhancers(applyMiddleware(thunk))\n  )\n  // getCharacters()(store.dispatch, store.getState)\n  getCharactersGraphQL()(store.dispatch, store.getState)\n  restoreSesion()(store.dispatch)\n  reloadFavs()(store.dispatch, store.getState)\n  return store\n}\n\nexport default generateStore;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom';\nimport 'font-awesome/css/font-awesome.css';\nimport { Provider } from 'react-redux';\nimport generateStore from './redux/store';\nimport ApolloClient from 'apollo-boost';\nimport { ApolloProvider } from 'react-apollo'\n\nlet store = generateStore();\nlet client = new ApolloClient({\n  uri: 'https://rickandmortyapi.com/graphql'\n})\n\nlet WithRouter = () => <BrowserRouter><App /></BrowserRouter>\nlet WithStore = () => <Provider store={store}><WithRouter /></Provider>\nlet WithApollo = () => <ApolloProvider client={client}><WithStore /></ApolloProvider>\n\nReactDOM.render(<WithApollo/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"card_container__3G4Fa\",\"card\":\"card_card__1py-W\",\"name\":\"card_name__31aE7\",\"actions\":\"card_actions__31KML\",\"left\":\"card_left__kmFAA\",\"right\":\"card_right__ikHyB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"favs_container__1T6OY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"login_container__2teO8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"home_container__2grJ2\"};","module.exports = __webpack_public_path__ + \"static/media/spinner.321c9524.gif\";"],"sourceRoot":""}